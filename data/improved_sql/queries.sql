use sales_data;

/**
1. Overall Performance Analysis:

- Calculate total sales revenue over time.
- Analyze the distribution of deal stages to understand the sales pipeline's health.
- Calculate win rates for different products, sales agents, and accounts.
- Identify the most successful sales agents and accounts based on closed deals.
**/

-- A. Total sales revenue over time
SELECT DATE_FORMAT(close_date, '%Y-%m') AS month_year,
       SUM(close_value) AS total_revenue
FROM sales_pipeline
WHERE deal_stage = 'Won'
GROUP BY month_year
ORDER BY month_year;

-- A2. Total sales revenue over time on a weekly basis
SELECT YEARWEEK(close_date) AS week_number,
       SUM(close_value) AS total_revenue
FROM sales_pipeline
WHERE deal_stage = 'Won'
GROUP BY week_number
ORDER BY week_number;


-- B. Distribution of deal_stages
SELECT deal_stage,
       COUNT(*) AS stage_count
FROM sales_pipeline
GROUP BY deal_stage;

-- C. Win Rates for Different Products, Sales Agents, and Accounts:
-- i. Win rates for different products
SELECT product,
       SUM(CASE WHEN deal_stage = 'Won' THEN 1 ELSE 0 END) / COUNT(*) AS win_rate
FROM sales_pipeline
GROUP BY product
ORDER BY win_rate DESC;

-- ii. Win rates for different sales agents
SELECT sales_agent,
       SUM(CASE WHEN deal_stage = 'Won' THEN 1 ELSE 0 END) / COUNT(*) AS win_rate
FROM sales_pipeline
GROUP BY sales_agent
ORDER BY win_rate DESC;

-- iii. Win rates for different accounts
SELECT account,
       SUM(CASE WHEN deal_stage = 'Won' THEN 1 ELSE 0 END) / COUNT(*) AS win_rate
FROM sales_pipeline
GROUP BY account
ORDER BY win_rate DESC;


-- D. Most Successful Sales Agents and Accounts Based on Closed Deals
-- i. Most successful sales agents
SELECT sales_agent,
       COUNT(*) AS closed_deals
FROM sales_pipeline
WHERE deal_stage = 'Won'
GROUP BY sales_agent
ORDER BY closed_deals DESC
LIMIT 10;

-- ii. Most successful accounts based on closed deals
SELECT account,
       COUNT(*) AS closed_deals
FROM sales_pipeline
WHERE deal_stage = 'Won'
GROUP BY account
ORDER BY closed_deals DESC
LIMIT 10;



/*
2. Product Performance Dashboard:
	- Performance metrics: Revenue generated by each product, number of deals closed.
	- Deal stage analysis: Distribution of deal stages for each product.
	- Cross-selling opportunities: Products frequently sold together.

*/

-- Performance metrics: Revenue generated by each product and number of deals closed
SELECT 
    p.product,
    SUM(sp.close_value) AS total_revenue,
    COUNT(sp.opportunity_id) AS num_deals_closed
FROM 
    Sales_Pipeline sp
JOIN 
    Products p ON sp.product = p.product
WHERE 
    sp.deal_stage = 'Won'
GROUP BY 
    p.product
ORDER BY total_revenue DESC;

-- Deal stage analysis: Distribution of deal stages for each product
SELECT 
    p.product,
    sp.deal_stage,
    COUNT(sp.opportunity_id) AS num_deals
FROM 
    Sales_Pipeline sp
JOIN 
    Products p ON sp.product = p.product
GROUP BY 
    p.product, sp.deal_stage;
    
-- Revenue per Product
SELECT 
    product,
    SUM(close_value) AS total_revenue
FROM 
    Sales_Pipeline
GROUP BY 
    product
ORDER BY 
    total_revenue DESC;

-- Product per Quarter
SELECT 
    product,
    QUARTER(close_date) AS quarter,
    COUNT(*) AS deals_closed
FROM 
    Sales_Pipeline
GROUP BY 
    product, quarter
ORDER BY 
    product, quarter;


-- Regional Revenue per Product
SELECT 
    ST.regional_office,
    SP.product,
    SUM(SP.close_value) AS total_revenue
FROM 
    Sales_Pipeline SP
JOIN 
    Sales_Teams ST ON SP.sales_agent = ST.sales_agent
GROUP BY 
    ST.regional_office, SP.product
ORDER BY 
    ST.regional_office, total_revenue DESC;



-- Retrieves top accounts by lost deals along with 
-- corresponding sales agent and manager, and the lost product
SELECT
    sp.account,
    st.sales_agent,
    st.manager,
    sp.product,
    COUNT(sp.account) AS times_lost
FROM sales_pipeline AS sp
JOIN sales_teams AS st ON sp.sales_agent = st.sales_agent
WHERE sp.deal_stage = 'Lost'
GROUP BY sp.account, sp.product, st.sales_agent, st.manager
ORDER BY times_lost DESC
LIMIT 20;



-- Best Sales Team, Agents and Managers
SELECT 
	sp.sales_agent,
    st.manager,
    st.regional_office,
    SUM(sp.close_value) AS total_revenue
FROM sales_pipeline AS sp
JOIN sales_teams AS st ON sp.sales_agent = st.sales_agent
WHERE deal_stage = 'Won'
GROUP BY sales_agent
ORDER BY total_revenue DESC
LIMIT 10;






/*
Cross-selling opportunities: Products frequently sold together.
	-- Identify products frequently sold together based on closed deals
	-- Common Table Expression (CTE) to filter closed deals
*/

WITH ClosedDeals AS (
    SELECT *
    FROM Sales_Pipeline
    WHERE deal_stage = 'Won' -- Assuming 'Won' represents closed deals
),

-- CTE to generate product pairs and count their occurrences
ProductPairs AS (
    SELECT 
        a.product AS product1,
        b.product AS product2,
        COUNT(*) AS frequency
    FROM ClosedDeals a
    JOIN ClosedDeals b ON a.opportunity_id = b.opportunity_id
    WHERE a.product < b.product 
    GROUP BY a.product, b.product
)

-- Query to select product pairs along with their frequencies
SELECT 
    product1,
    product2,
    frequency
FROM ProductPairs
ORDER BY frequency DESC;

/*
The query is returning an empty table, which suggests that there may not be any pairs of products that were sold 
together in the same closed deal in your dataset. There are a few potential reasons why this might be the case:
	1. Data Quality
	2. Join Condition
    3. Data Distribution.
*/



-- Top ten customers lost and product 
SELECT
	account,
    product,
    COUNT(account)  AS times_lost
FROM sales_pipeline
WHERE deal_stage = 'Lost'
GROUP BY account, product
ORDER BY times_lost DESC;


-- Fifteen Best Accounts by Revenue
SELECT
	account,
    SUM(close_value)  AS sum_revenue
FROM sales_pipeline
WHERE deal_stage = 'Won'
GROUP BY account
ORDER BY sum_revenue DESC
LIMIT 15;
